ref
Learning SQL, 2nd Edition
Master SQL Fundamentals
By Alan Beaulieu

download LearningSQLExample.sql from https://resources.oreilly.com/examples/9780596520847/blob/master/LearningSQLExample.sql

create a new schema 'bank' from MySQL workbench
mysql -u lrngsql -p bank
mysql> use bank;
mysql>source C:\mine\SJSU\work-172\sql\LearningSQLExample.sql

reverseengineer to see schema

//create schema test from mysql work bench

CREATE TABLE person (person_id SMALLINT UNSIGNED,  fname VARCHAR(20),  lname VARCHAR(20),  gender ENUM('M','F'),  birth_date DATE,  street VARCHAR(30),  city VARCHAR(20),  state VARCHAR(20),  country VARCHAR(20),  postal_code VARCHAR(20),  CONSTRAINT pk_person PRIMARY KEY (person_id) );

DESC person;

CREATE TABLE favorite_food (person_id SMALLINT UNSIGNED,  food VARCHAR(20),  CONSTRAINT pk_favorite_food PRIMARY KEY (person_id, food), CONSTRAINT fk_fav_food_person_id FOREIGN KEY (person_id)  REFERENCES person (person_id)    );

INSERT INTO person
    (person_id, fname, lname, eye_color, birth_date)
    VALUES (1, 'William','Turner', 'BR', '1972-05-27');

SELECT person_id, fname, lname, birth_date    FROM person    WHERE person_id = 1;

INSERT INTO favorite_food (person_id, food) VALUES (1, 'pizza');
INSERT INTO favorite_food (person_id, food) VALUES (1, 'cookies');
INSERT INTO favorite_food (person_id, food) VALUES (1, 'nachos');

INSERT INTO person
   (person_id, fname, lname, eye_color, birth_date,
   street, city, state, country, postal_code)
    VALUES (2, 'Susan','Smith', 'BL', '1975-11-02',
    '23 Maple St.', 'Arlington', 'VA', 'USA', '20220');

SELECT person_id, fname, lname, birth_date FROM person;

UPDATE person   SET street = '1225 Tremont St.',  city = 'Boston',  state = 'MA',  country = 'USA', postal_code = '02138'  WHERE person_id = 1;

DELETE FROM person WHERE person_id = 2;

use bank;
SELECT emp_id, fname, lname    FROM employee    WHERE lname = 'Smith';

//The next query demonstrates the use of a table column, a literal, an expression,              // and a built-in function call in a single query against the employee table:
SELECT emp_id, 'ACTIVE', emp_id * 3.14159,  UPPER(lname) FROM employee;

//remove duplicates
SELECT DISTINCT cust_id  FROM account;

//Subquery-generated tablesA subquery is a query contained within another query. Subqueries are surrounded by parentheses and can be found in various parts of a select statement; within the from clause, however, a subquery serves the                        role of generating a temporary table that is visible from all other query                        clauses and can interact with other tables named in the from clause. Hereâ€™s a simple                            example:
 SELECT e.emp_id, e.fname, e.lname
    FROM (SELECT emp_id, fname, lname, start_date, title
    FROM employee) e;

//joins
SELECT employee.emp_id, employee.fname,   
employee.lname, department.name dept_name  
FROM employee INNER JOIN department    
ON employee.dept_id = department.dept_id;

//TABLE ALIASES
SELECT e.emp_id, e.fname, e.lname,
  d.name dept_name
FROM employee e INNER JOIN department d
  ON e.dept_id = d.dept_id;

same as - >
SELECT e.emp_id, e.fname, e.lname,  d.name dept_nameFROM employee AS e INNER JOIN department AS d  ON e.dept_id = d.dept_id;

//filter
SELECT emp_id, fname, lname, start_date, title  FROM employee  WHERE title = 'Head Teller';

SELECT emp_id, fname, lname, start_date, title FROM employee  WHERE title = 'Head Teller' AND start_date > '2006-01-01';

SELECT emp_id, fname, lname, start_date, title  FROM employee   WHERE (title = 'Head Teller' AND start_date > '2006-01-01')     OR (title = 'Teller' AND start_date > '2007-01-01');

//find  trends in your data,
For example, rather than looking at a list of employees and the departments to which they are assigned, you might want to look at a list of departments along with the number of employees assigned to each department. When using the group by clause, you may also use the having clause, which allows you to filter group data in the same way the where clause lets you filter raw data.
   SELECT d.name, count(e.emp_id) num_employees  FROM department d INNER JOIN employee e   ON d.dept_id = e.dept_id   GROUP BY d.name   HAVING count(e.emp_id) > 2;

//The order by clause is the mechanism for sorting your result set using either raw column data or expressions based on column data.
SELECT open_emp_id, product_cd FROM account ORDER BY open_emp_id;
SELECT account_id, product_cd, open_date, avail_balance  FROM account  ORDER BY avail_balance DESC;

//Condition Evaluation
Consider the following where clause:
WHERE title = 'Teller' AND start_date < '2007-01-01'

//condition is the inequality condition, which asserts that two expressions are not equal.
   SELECT pt.name product_type, p.name product
    FROM product p INNER JOIN product_type pt
    ON p.product_type_cd = pt.product_type_cd
    WHERE pt.name <> 'Customer Accounts';

//RANGE CONDITIONS
    SELECT emp_id, fname, lname, start_date  FROM employee
    WHERE start_date < '2007-01-01';

SELECT emp_id, fname, lname, start_date  FROM employee
    WHERE start_date < '2007-01-01'
    AND start_date >= '2005-01-01';

SELECT emp_id, fname, lname, start_date FROM employee
   WHERE start_date BETWEEN '2007-01-01' AND '2005-01-01';
  
SELECT account_id, product_cd, cust_id, avail_balance  FROM account
  WHERE avail_balance BETWEEN 3000 AND 5000;

//MEMBERSHIP CONDITIONS
SELECT account_id, product_cd, cust_id, avail_balance FROM account
    WHERE product_cd = 'CHK' OR product_cd = 'SAV'
    OR product_cd = 'CD' OR product_cd = 'MM';

SELECT account_id, product_cd, cust_id, avail_balance
FROM account
WHERE product_cd IN ('CHK','SAV','CD','MM');

SELECT account_id, product_cd, cust_id, avail_balance  FROM account  WHERE product_cd NOT IN ('CHK','SAV','CD','MM');

//matching codititons
SELECT lname FROM employee WHERE lname LIKE '_a%e%';
SELECT cust_id, fed_id  FROM customer  WHERE fed_id LIKE '___-__-____';

SELECT emp_id, fname, lname FROM employee
    WHERE lname LIKE 'F%' OR lname LIKE 'G%';

//CARTESIAN PRODUCT
SELECT e.fname, e.lname, d.name
    FROM employee e JOIN department d;

//INNER JOINS
SELECT e.fname, e.lname, d.name
    FROM employee e JOIN department d
    ON e.dept_id = d.dept_id;

//Join >2 tables
SELECT a.account_id, c.fed_id, e.fname, e.lname
     FROM customer c INNER JOIN account a
      ON a.cust_id = c.cust_id
      INNER JOIN employee e
      ON a.open_emp_id = e.emp_id
     WHERE c.cust_type_cd = 'B';

//Grouping ConceptsSometimes you will want to find trends in your data that will require the database server to cook the data a bit before you can generate the results you are looking
SELECT open_emp_id, COUNT(*) how_many
    FROM account
    GROUP BY open_emp_id;

SELECT open_emp_id, COUNT(*) how_many
    FROM account
    GROUP BY open_emp_id
    HAVING COUNT(*) > 4;

Aggregate Functions
Aggregate functions perform a specific operation over all rows in a group. Although every database server has its own set of specialty aggregate functions, the common aggregate functions implemented by all major servers include:

Max()
Returns the maximum value within a set

Min()
Returns the minimum value within a set

Avg()
Returns the average value across a set

Sum()
Returns the sum of the values across a set

Count()
Returns the number of values in a set

   SELECT MAX(avail_balance) max_balance,
    MIN(avail_balance) min_balance,
    AVG(avail_balance) avg_balance,
    SUM(avail_balance) tot_balance,
    COUNT(*) num_accounts
    FROM account
    WHERE product_cd = 'CHK';

SELECT product_cd,
    MAX(avail_balance) max_balance,
    MIN(avail_balance) min_balance,
    AVG(avail_balance) avg_balance,
    SUM(avail_balance) tot_balance,
    COUNT(*) num_accts
    FROM account
    GROUP BY product_cd;

//USING EXPRESSIONS  
    SELECT MAX(pending_balance - avail_balance) max_uncleared FROM account;

//Grouping
    SELECT product_cd, SUM(avail_balance) prod_balance
    FROM account
    GROUP BY product_cd;
//Grouping - multi column
SELECT product_cd, open_branch_id,
    SUM(avail_balance) tot_balance
    FROM account
    GROUP BY product_cd, open_branch_id;

SELECT product_cd, SUM(avail_balance) prod_balance
    FROM account
    WHERE status = 'ACTIVE'
    GROUP BY product_cd
    HAVING SUM(avail_balance) >= 10000;

//SUBQUERY
A subquery is a query contained within another SQL statement (which I refer to as the containing statement for the rest of this discussion). A subquery is always enclosed within parentheses
Following subquery returns the maximum value found in the account_id column in the account table, and the containing statement then returns data about that account
 SELECT account_id, product_cd, cust_id, avail_balance
    FROM account
    WHERE account_id = (SELECT MAX(account_id) FROM account);


